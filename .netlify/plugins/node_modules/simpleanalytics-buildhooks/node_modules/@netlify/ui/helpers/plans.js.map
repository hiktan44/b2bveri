{"version":3,"file":"plans.js","sources":["../../../../libs/ui/src/helpers/plans.ts"],"sourcesContent":["import { capitalize } from './format';\n\n// Orb plan names\nexport const ORB_FREE_NAME = 'Free';\nexport const ORB_STARTER_NAME = 'Starter';\nexport const ORB_PRO_NAME = 'Pro';\nexport const ORB_GROWTH_NAME = 'Growth';\n\n// Legacy plan names\nexport const STARTER_NAME = 'Starter';\nexport const PRO_NAME = 'Pro';\nexport const BUSINESS_NAME = 'Business';\nexport const ENTERPRISE_NAME = 'Enterprise';\nexport const OPEN_SOURCE_NAME = 'Open Source';\nexport const LEGACY_CREATE_PLAN_UI_NAME = 'Legacy';\n\n// Orb plan slugs\nexport const ORB_FREE_SLUG = 'free-is-free';\nexport const ORB_STARTER_SLUG = 'orb-starter';\nexport const ORB_PRO_SLUG = 'orb-pro';\nexport const ORB_GROWTH_SLUG = 'orb-growth';\n\n// Legacy plan slugs\nexport const STARTER_SLUG = 'starter';\nexport const PRO_SLUG = 'pro-v4';\nexport const ENTERPRISE_TRIAL_SLUG = 'enterprise-trial';\nexport const BUSINESS_SLUG = 'business-v4';\nexport const ENTERPRISE_SLUG = 'enterprise';\nexport const OPEN_SOURCE_SLUG = 'opensource';\nexport const AGENCY_SLUG = 'agency-marketing-site-benefit';\n\n/*\n * We are using the ID and base price for \"pro-v4\" so that the\n * UpgradeModal (for Zuora plans) can use them.\n * This is because UpgradeModal only lets you upgrade to a Pro plan\n * And we need to provide the ID and price for the Pro plan.\n * We could get it from the available list of plans, but that involves\n * a lot of prop drilling in a lot of places.\n * It's easier to just hardcode it here.\n * This code should be removed once we've migrated to Orb.\n */\nexport const PRO_V4_ID = '5ed6c554f0f6d000bb4dd075';\nexport const PRO_V4_PRICE = 19;\n\nexport type AccountPlanData = {\n  on_pro_trial: boolean;\n  type_name: string;\n  type_slug: string;\n};\n\nexport const isOrbPlan = (account?: AccountPlanData): boolean => {\n  if (!account || !account.type_slug) return false;\n  return [\n    ORB_FREE_SLUG,\n    ORB_STARTER_SLUG,\n    ORB_PRO_SLUG,\n    ORB_GROWTH_SLUG,\n  ].includes(account.type_slug);\n};\n\nexport const isLegacyPlan = (account?: AccountPlanData): boolean => {\n  return !isOrbPlan(account);\n};\n\nexport const isDeprecatedPlan = (account?: AccountPlanData): boolean => {\n  if (!account || !account.type_slug) return false;\n  return ![\n    ORB_FREE_SLUG,\n    ORB_STARTER_SLUG,\n    ORB_PRO_SLUG,\n    ORB_GROWTH_SLUG,\n    STARTER_SLUG,\n    PRO_SLUG,\n    ENTERPRISE_TRIAL_SLUG,\n    BUSINESS_SLUG,\n    ENTERPRISE_SLUG,\n    OPEN_SOURCE_SLUG,\n    AGENCY_SLUG,\n  ].includes(account.type_slug);\n};\n\nexport const isPlanFree = (account?: AccountPlanData): boolean =>\n  account?.type_slug === ORB_FREE_SLUG;\n\nexport const isPlanStarter = (account?: AccountPlanData): boolean =>\n  account?.type_slug === STARTER_SLUG;\n\nexport const isPlanOpenSource = (account?: AccountPlanData): boolean =>\n  account?.type_slug === OPEN_SOURCE_SLUG;\n\nexport const isPlanPro = (account?: AccountPlanData): boolean =>\n  account?.type_slug === PRO_SLUG;\n\nexport const isPlanProTrial = (account?: AccountPlanData): boolean =>\n  !!(account?.on_pro_trial && account?.type_slug === PRO_SLUG);\n\nexport const isPlanEnterprise = (account?: AccountPlanData): boolean =>\n  account?.type_slug === ENTERPRISE_SLUG;\n\nexport const isPlanEnterpriseTrial = (account?: AccountPlanData): boolean =>\n  account?.type_slug === ENTERPRISE_TRIAL_SLUG;\n\nexport const isPlanEnterpriseLevel = (account?: AccountPlanData): boolean =>\n  isPlanEnterprise(account) || isPlanEnterpriseTrial(account);\n\nexport const isPlanTrial = (account?: AccountPlanData): boolean =>\n  isPlanProTrial(account) || isPlanEnterpriseTrial(account);\n\nexport const normalizeTeamPlanName = (planName?: string) =>\n  planName?.toLowerCase().replace('personal', STARTER_SLUG);\n\nexport const getNormalizedPlanNameFromAccount = (account?: AccountPlanData) =>\n  `${normalizeTeamPlanName(account?.type_name)}${\n    isPlanTrial(account) ? ' (free month)' : ''\n  }`;\n\nexport const getPlanTitleFromAccount = (account?: AccountPlanData) =>\n  humanizePlanName(getNormalizedPlanNameFromAccount(account));\n\nexport const humanizePlanName = (planName?: string) => {\n  return planName ? planName.split('_').map(capitalize).join(' ') : '';\n};\n"],"names":[],"mappings":";AAGO,MAAM,gBAAgB;AACtB,MAAM,mBAAmB;AACzB,MAAM,eAAe;AACrB,MAAM,kBAAkB;AAGxB,MAAM,eAAe;AACrB,MAAM,WAAW;AACjB,MAAM,gBAAgB;AACtB,MAAM,kBAAkB;AACxB,MAAM,mBAAmB;AACzB,MAAM,6BAA6B;AAGnC,MAAM,gBAAgB;AACtB,MAAM,mBAAmB;AACzB,MAAM,eAAe;AACrB,MAAM,kBAAkB;AAGxB,MAAM,eAAe;AACrB,MAAM,WAAW;AACjB,MAAM,wBAAwB;AAC9B,MAAM,gBAAgB;AACtB,MAAM,kBAAkB;AACxB,MAAM,mBAAmB;AACzB,MAAM,cAAc;AAYpB,MAAM,YAAY;AAClB,MAAM,eAAe;AAQf,MAAA,YAAY,CAAC,YAAuC;AAC/D,MAAI,CAAC,WAAW,CAAC,QAAQ,UAAkB,QAAA;AACpC,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,EACA,SAAS,QAAQ,SAAS;AAC9B;AAEa,MAAA,eAAe,CAAC,YAAuC;AAC3D,SAAA,CAAC,UAAU,OAAO;AAC3B;AAEa,MAAA,mBAAmB,CAAC,YAAuC;AACtE,MAAI,CAAC,WAAW,CAAC,QAAQ,UAAkB,QAAA;AAC3C,SAAO,CAAC;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,EACA,SAAS,QAAQ,SAAS;AAC9B;AAEO,MAAM,aAAa,CAAC,aACzB,mCAAS,eAAc;AAElB,MAAM,gBAAgB,CAAC,aAC5B,mCAAS,eAAc;AAElB,MAAM,mBAAmB,CAAC,aAC/B,mCAAS,eAAc;AAElB,MAAM,YAAY,CAAC,aACxB,mCAAS,eAAc;AAEZ,MAAA,iBAAiB,CAAC,YAC7B,CAAC,GAAE,mCAAS,kBAAgB,mCAAS,eAAc;AAE9C,MAAM,mBAAmB,CAAC,aAC/B,mCAAS,eAAc;AAElB,MAAM,wBAAwB,CAAC,aACpC,mCAAS,eAAc;AAElB,MAAM,wBAAwB,CAAC,YACpC,iBAAiB,OAAO,KAAK,sBAAsB,OAAO;AAErD,MAAM,cAAc,CAAC,YAC1B,eAAe,OAAO,KAAK,sBAAsB,OAAO;AAE7C,MAAA,wBAAwB,CAAC,aACpC,qCAAU,cAAc,QAAQ,YAAY;AAEvC,MAAM,mCAAmC,CAAC,YAC/C,GAAG,sBAAsB,mCAAS,SAAS,CAAC,GAC1C,YAAY,OAAO,IAAI,kBAAkB,EAC3C;AAEK,MAAM,0BAA0B,CAAC,YACtC,iBAAiB,iCAAiC,OAAO,CAAC;AAE/C,MAAA,mBAAmB,CAAC,aAAsB;AAC9C,SAAA,WAAW,SAAS,MAAM,GAAG,EAAE,IAAI,UAAU,EAAE,KAAK,GAAG,IAAI;AACpE;"}